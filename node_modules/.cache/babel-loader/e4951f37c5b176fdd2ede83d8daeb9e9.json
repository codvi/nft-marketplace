{"ast":null,"code":"import Navbar from\"./Navbar\";import NFTTile from\"./NFTTile\";import MarketplaceJSON from\"../Marketplace.json\";import axios from\"axios\";import{useState}from\"react\";import{GetIpfsUrlFromPinata}from\"../utils\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function Marketplace(){const sampleData=[{\"name\":\"NFT#1\",\"description\":\"Alchemy's First NFT\",\"website\":\"http://axieinfinity.io\",\"image\":\"https://gateway.pinata.cloud/ipfs/QmTsRJX7r5gyubjkdmzFrKQhHv74p5wT9LdeF1m3RTqrE5\",\"price\":\"0.03ETH\",\"currentlySelling\":\"True\",\"address\":\"0xe81Bf5A757CB4f7F82a2F23b1e59bE45c33c5b13\"},{\"name\":\"NFT#2\",\"description\":\"Alchemy's Second NFT\",\"website\":\"http://axieinfinity.io\",\"image\":\"https://gateway.pinata.cloud/ipfs/QmdhoL9K8my2vi3fej97foiqGmJ389SMs55oC5EdkrxF2M\",\"price\":\"0.03ETH\",\"currentlySelling\":\"True\",\"address\":\"0xe81Bf5A757C4f7F82a2F23b1e59bE45c33c5b13\"},{\"name\":\"NFT#3\",\"description\":\"Alchemy's Third NFT\",\"website\":\"http://axieinfinity.io\",\"image\":\"https://gateway.pinata.cloud/ipfs/QmTsRJX7r5gyubjkdmzFrKQhHv74p5wT9LdeF1m3RTqrE5\",\"price\":\"0.03ETH\",\"currentlySelling\":\"True\",\"address\":\"0xe81Bf5A757C4f7F82a2F23b1e59bE45c33c5b13\"}];const[data,updateData]=useState(sampleData);const[dataFetched,updateFetched]=useState(false);async function getAllNFTs(){const ethers=require(\"ethers\");//After adding your Hardhat network to your metamask, this code will get providers and signers\nconst provider=new ethers.providers.Web3Provider(window.ethereum);const signer=provider.getSigner();//Pull the deployed contract instance\nlet contract=new ethers.Contract(MarketplaceJSON.address,MarketplaceJSON.abi,signer);//create an NFT Token\nlet transaction=await contract.getAllNFTs();//Fetch all the details of every NFT from the contract and display\nconst items=await Promise.all(transaction.map(async i=>{var tokenURI=await contract.tokenURI(i.tokenId);console.log(\"getting this tokenUri\",tokenURI);tokenURI=GetIpfsUrlFromPinata(tokenURI);let meta=await axios.get(tokenURI);meta=meta.data;let price=ethers.utils.formatUnits(i.price.toString(),'ether');let item={price,tokenId:i.tokenId.toNumber(),seller:i.seller,owner:i.owner,image:meta.image,name:meta.name,description:meta.description};return item;}));updateFetched(true);updateData(items);}if(!dataFetched)getAllNFTs();return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Navbar,{}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex flex-col place-items-center mt-20\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"md:text-xl font-bold text-white\",children:\"Top NFTs\"}),/*#__PURE__*/_jsx(\"div\",{className:\"flex mt-5 justify-between flex-wrap max-w-screen-xl text-center\",children:data.map((value,index)=>{return/*#__PURE__*/_jsx(NFTTile,{data:value},index);})})]})]});}","map":{"version":3,"names":["Navbar","NFTTile","MarketplaceJSON","axios","useState","GetIpfsUrlFromPinata","jsx","_jsx","jsxs","_jsxs","Marketplace","sampleData","data","updateData","dataFetched","updateFetched","getAllNFTs","ethers","require","provider","providers","Web3Provider","window","ethereum","signer","getSigner","contract","Contract","address","abi","transaction","items","Promise","all","map","i","tokenURI","tokenId","console","log","meta","get","price","utils","formatUnits","toString","item","toNumber","seller","owner","image","name","description","children","className","value","index"],"sources":["C:/Users/upadh/Desktop/nft_mp/NFT-Marketplace-Tutorial/src/components/Marketplace.js"],"sourcesContent":["import Navbar from \"./Navbar\";\r\nimport NFTTile from \"./NFTTile\";\r\nimport MarketplaceJSON from \"../Marketplace.json\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { GetIpfsUrlFromPinata } from \"../utils\";\r\n\r\nexport default function Marketplace() {\r\nconst sampleData = [\r\n    {\r\n        \"name\": \"NFT#1\",\r\n        \"description\": \"Alchemy's First NFT\",\r\n        \"website\":\"http://axieinfinity.io\",\r\n        \"image\":\"https://gateway.pinata.cloud/ipfs/QmTsRJX7r5gyubjkdmzFrKQhHv74p5wT9LdeF1m3RTqrE5\",\r\n        \"price\":\"0.03ETH\",\r\n        \"currentlySelling\":\"True\",\r\n        \"address\":\"0xe81Bf5A757CB4f7F82a2F23b1e59bE45c33c5b13\",\r\n    },\r\n    {\r\n        \"name\": \"NFT#2\",\r\n        \"description\": \"Alchemy's Second NFT\",\r\n        \"website\":\"http://axieinfinity.io\",\r\n        \"image\":\"https://gateway.pinata.cloud/ipfs/QmdhoL9K8my2vi3fej97foiqGmJ389SMs55oC5EdkrxF2M\",\r\n        \"price\":\"0.03ETH\",\r\n        \"currentlySelling\":\"True\",\r\n        \"address\":\"0xe81Bf5A757C4f7F82a2F23b1e59bE45c33c5b13\",\r\n    },\r\n    {\r\n        \"name\": \"NFT#3\",\r\n        \"description\": \"Alchemy's Third NFT\",\r\n        \"website\":\"http://axieinfinity.io\",\r\n        \"image\":\"https://gateway.pinata.cloud/ipfs/QmTsRJX7r5gyubjkdmzFrKQhHv74p5wT9LdeF1m3RTqrE5\",\r\n        \"price\":\"0.03ETH\",\r\n        \"currentlySelling\":\"True\",\r\n        \"address\":\"0xe81Bf5A757C4f7F82a2F23b1e59bE45c33c5b13\",\r\n    },\r\n];\r\nconst [data, updateData] = useState(sampleData);\r\nconst [dataFetched, updateFetched] = useState(false);\r\n\r\nasync function getAllNFTs() {\r\n    const ethers = require(\"ethers\");\r\n    //After adding your Hardhat network to your metamask, this code will get providers and signers\r\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n    const signer = provider.getSigner();\r\n    //Pull the deployed contract instance\r\n    let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer)\r\n    //create an NFT Token\r\n    let transaction = await contract.getAllNFTs()\r\n\r\n    //Fetch all the details of every NFT from the contract and display\r\n    const items = await Promise.all(transaction.map(async i => {\r\n        var tokenURI = await contract.tokenURI(i.tokenId);\r\n        console.log(\"getting this tokenUri\", tokenURI);\r\n        tokenURI = GetIpfsUrlFromPinata(tokenURI);\r\n        let meta = await axios.get(tokenURI);\r\n        meta = meta.data;\r\n\r\n        let price = ethers.utils.formatUnits(i.price.toString(), 'ether');\r\n        let item = {\r\n            price,\r\n            tokenId: i.tokenId.toNumber(),\r\n            seller: i.seller,\r\n            owner: i.owner,\r\n            image: meta.image,\r\n            name: meta.name,\r\n            description: meta.description,\r\n        }\r\n        return item;\r\n    }))\r\n\r\n    updateFetched(true);\r\n    updateData(items);\r\n}\r\n\r\nif(!dataFetched)\r\n    getAllNFTs();\r\n\r\nreturn (\r\n    <div>\r\n        <Navbar></Navbar>\r\n        <div className=\"flex flex-col place-items-center mt-20\">\r\n            <div className=\"md:text-xl font-bold text-white\">\r\n                Top NFTs\r\n            </div>\r\n            <div className=\"flex mt-5 justify-between flex-wrap max-w-screen-xl text-center\">\r\n                {data.map((value, index) => {\r\n                    return <NFTTile data={value} key={index}></NFTTile>;\r\n                })}\r\n            </div>\r\n        </div>            \r\n    </div>\r\n);\r\n\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}