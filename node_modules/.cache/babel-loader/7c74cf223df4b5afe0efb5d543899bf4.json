{"ast":null,"code":"import Navbar from\"./Navbar\";import axie from\"../tile.jpeg\";import{useLocation,useParams}from'react-router-dom';import MarketplaceJSON from\"../Marketplace.json\";import axios from\"axios\";import{useState}from\"react\";import{GetIpfsUrlFromPinata}from\"../utils\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function NFTPage(props){const[data,updateData]=useState({});const[dataFetched,updateDataFetched]=useState(false);const[message,updateMessage]=useState(\"\");const[currAddress,updateCurrAddress]=useState(\"0x\");async function getNFTData(tokenId){const ethers=require(\"ethers\");//After adding your Hardhat network to your metamask, this code will get providers and signers\nconst provider=new ethers.providers.Web3Provider(window.ethereum);const signer=provider.getSigner();const addr=await signer.getAddress();//Pull the deployed contract instance\nlet contract=new ethers.Contract(MarketplaceJSON.address,MarketplaceJSON.abi,signer);//create an NFT Token\nvar tokenURI=await contract.tokenURI(tokenId);const listedToken=await contract.getListedTokenForId(tokenId);tokenURI=GetIpfsUrlFromPinata(tokenURI);let meta=await axios.get(tokenURI);meta=meta.data;console.log(listedToken);let item={price:meta.price,tokenId:tokenId,seller:listedToken.seller,owner:listedToken.owner,image:meta.image,name:meta.name,description:meta.description};console.log(item);updateData(item);updateDataFetched(true);console.log(\"address\",addr);updateCurrAddress(addr);}async function buyNFT(tokenId){try{const ethers=require(\"ethers\");//After adding your Hardhat network to your metamask, this code will get providers and signers\nconst provider=new ethers.providers.Web3Provider(window.ethereum);const signer=provider.getSigner();//Pull the deployed contract instance\nlet contract=new ethers.Contract(MarketplaceJSON.address,MarketplaceJSON.abi,signer);const salePrice=ethers.utils.parseUnits(data.price,'ether');updateMessage(\"Buying the NFT... Please Wait (Upto 5 mins)\");//run the executeSale function\nlet transaction=await contract.executeSale(tokenId,{value:salePrice});await transaction.wait();alert('You successfully bought the NFT!');updateMessage(\"\");}catch(e){alert(\"Upload Error\"+e);}}const params=useParams();const tokenId=params.tokenId;if(!dataFetched)getNFTData(tokenId);if(typeof data.image==\"string\")data.image=GetIpfsUrlFromPinata(data.image);return/*#__PURE__*/_jsxs(\"div\",{style:{\"min-height\":\"100vh\"},children:[/*#__PURE__*/_jsx(Navbar,{}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex ml-20 mt-20\",children:[/*#__PURE__*/_jsx(\"img\",{src:data.image,alt:\"\",className:\"w-2/5\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"text-xl ml-20 space-y-8 text-white shadow-2xl rounded-lg border-2 p-5\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[\"Name: \",data.name]}),/*#__PURE__*/_jsxs(\"div\",{children:[\"Description: \",data.description]}),/*#__PURE__*/_jsxs(\"div\",{children:[\"Price: \",/*#__PURE__*/_jsx(\"span\",{className:\"\",children:data.price+\" ETH\"})]}),/*#__PURE__*/_jsxs(\"div\",{children:[\"Owner: \",/*#__PURE__*/_jsx(\"span\",{className:\"text-sm\",children:data.owner})]}),/*#__PURE__*/_jsxs(\"div\",{children:[\"Seller: \",/*#__PURE__*/_jsx(\"span\",{className:\"text-sm\",children:data.seller})]}),/*#__PURE__*/_jsxs(\"div\",{children:[currAddress!=data.owner&&currAddress!=data.seller?/*#__PURE__*/_jsx(\"button\",{className:\"enableEthereumButton bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded text-sm\",onClick:()=>buyNFT(tokenId),children:\"Buy this NFT\"}):/*#__PURE__*/_jsx(\"div\",{className:\"text-emerald-700\",children:\"You are the owner of this NFT\"}),/*#__PURE__*/_jsx(\"div\",{className:\"text-green text-center mt-3\",children:message})]})]})]})]});}","map":{"version":3,"names":["Navbar","axie","useLocation","useParams","MarketplaceJSON","axios","useState","GetIpfsUrlFromPinata","jsx","_jsx","jsxs","_jsxs","NFTPage","props","data","updateData","dataFetched","updateDataFetched","message","updateMessage","currAddress","updateCurrAddress","getNFTData","tokenId","ethers","require","provider","providers","Web3Provider","window","ethereum","signer","getSigner","addr","getAddress","contract","Contract","address","abi","tokenURI","listedToken","getListedTokenForId","meta","get","console","log","item","price","seller","owner","image","name","description","buyNFT","salePrice","utils","parseUnits","transaction","executeSale","value","wait","alert","e","params","style","children","className","src","alt","onClick"],"sources":["C:/Users/upadh/Desktop/nft_mp/NFT-Marketplace-Tutorial/src/components/NFTpage.js"],"sourcesContent":["import Navbar from \"./Navbar\";\r\nimport axie from \"../tile.jpeg\";\r\nimport { useLocation, useParams } from 'react-router-dom';\r\nimport MarketplaceJSON from \"../Marketplace.json\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { GetIpfsUrlFromPinata } from \"../utils\";\r\n\r\nexport default function NFTPage (props) {\r\n\r\nconst [data, updateData] = useState({});\r\nconst [dataFetched, updateDataFetched] = useState(false);\r\nconst [message, updateMessage] = useState(\"\");\r\nconst [currAddress, updateCurrAddress] = useState(\"0x\");\r\n\r\nasync function getNFTData(tokenId) {\r\n    const ethers = require(\"ethers\");\r\n    //After adding your Hardhat network to your metamask, this code will get providers and signers\r\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n    const signer = provider.getSigner();\r\n    const addr = await signer.getAddress();\r\n    //Pull the deployed contract instance\r\n    let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer)\r\n    //create an NFT Token\r\n    var tokenURI = await contract.tokenURI(tokenId);\r\n    const listedToken = await contract.getListedTokenForId(tokenId);\r\n    tokenURI = GetIpfsUrlFromPinata(tokenURI);\r\n    let meta = await axios.get(tokenURI);\r\n    meta = meta.data;\r\n    console.log(listedToken);\r\n\r\n    let item = {\r\n        price: meta.price,\r\n        tokenId: tokenId,\r\n        seller: listedToken.seller,\r\n        owner: listedToken.owner,\r\n        image: meta.image,\r\n        name: meta.name,\r\n        description: meta.description,\r\n    }\r\n    console.log(item);\r\n    updateData(item);\r\n    updateDataFetched(true);\r\n    console.log(\"address\", addr)\r\n    updateCurrAddress(addr);\r\n}\r\n\r\nasync function buyNFT(tokenId) {\r\n    try {\r\n        const ethers = require(\"ethers\");\r\n        //After adding your Hardhat network to your metamask, this code will get providers and signers\r\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n        const signer = provider.getSigner();\r\n\r\n        //Pull the deployed contract instance\r\n        let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer);\r\n        const salePrice = ethers.utils.parseUnits(data.price, 'ether')\r\n        updateMessage(\"Buying the NFT... Please Wait (Upto 5 mins)\")\r\n        //run the executeSale function\r\n        let transaction = await contract.executeSale(tokenId, {value:salePrice});\r\n        await transaction.wait();\r\n\r\n        alert('You successfully bought the NFT!');\r\n        updateMessage(\"\");\r\n    }\r\n    catch(e) {\r\n        alert(\"Upload Error\"+e)\r\n    }\r\n}\r\n\r\n    const params = useParams();\r\n    const tokenId = params.tokenId;\r\n    if(!dataFetched)\r\n        getNFTData(tokenId);\r\n    if(typeof data.image == \"string\")\r\n        data.image = GetIpfsUrlFromPinata(data.image);\r\n\r\n    return(\r\n        <div style={{\"min-height\":\"100vh\"}}>\r\n            <Navbar></Navbar>\r\n            <div className=\"flex ml-20 mt-20\">\r\n                <img src={data.image} alt=\"\" className=\"w-2/5\" />\r\n                <div className=\"text-xl ml-20 space-y-8 text-white shadow-2xl rounded-lg border-2 p-5\">\r\n                    <div>\r\n                        Name: {data.name}\r\n                    </div>\r\n                    <div>\r\n                        Description: {data.description}\r\n                    </div>\r\n                    <div>\r\n                        Price: <span className=\"\">{data.price + \" ETH\"}</span>\r\n                    </div>\r\n                    <div>\r\n                        Owner: <span className=\"text-sm\">{data.owner}</span>\r\n                    </div>\r\n                    <div>\r\n                        Seller: <span className=\"text-sm\">{data.seller}</span>\r\n                    </div>\r\n                    <div>\r\n                    { currAddress != data.owner && currAddress != data.seller ?\r\n                        <button className=\"enableEthereumButton bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded text-sm\" onClick={() => buyNFT(tokenId)}>Buy this NFT</button>\r\n                        : <div className=\"text-emerald-700\">You are the owner of this NFT</div>\r\n                    }\r\n                    \r\n                    <div className=\"text-green text-center mt-3\">{message}</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}